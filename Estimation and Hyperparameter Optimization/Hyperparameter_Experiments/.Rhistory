setwd("~/Development/Scientific/Hybrid-NODEs-Biology/Hyperparameter_Experiments")
install.packages("MuMIn")
model_selection <- dredge(less_simple_model)
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
Glycolysis_known_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_KnownParamHybrid_Results.csv")
Glycolysis_unknown_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_UnknownParamHybrid_Results.csv")
Glycolysis_NODE_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_NODE_Results.csv")
LV_3Species_known_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
LV_3Species_unknown_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
LV_3Species_NODE_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### Process Data
# Add a column indicating which experiment, and add model structure identifier for each experiment
Glycolysis_known_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Experiment = rep("Glycolysis",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Experiment = rep("LV_3Species",nrow(LV_3Species_NODE_data))
Glycolysis_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Structure = rep("NODE",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Structure = rep("NODE",nrow(LV_3Species_NODE_data))
# Merge Data-sets
HyperParameterExperimentData = rbind(Glycolysis_known_param_hybrid_data,
Glycolysis_unknown_param_hybrid_data,
Glycolysis_NODE_data,
LV_3Species_known_param_hybrid_data,
LV_3Species_unknown_param_hybrid_data,
LV_3Species_NODE_data)
# Remove "inf" values (only removes 8 observations.)
HyperParameterExperimentData <- HyperParameterExperimentData[!is.infinite(HyperParameterExperimentData$Train.Loss),]
# Create factors of variables
HyperParameterExperimentData["Size_Factor"]=factor(HyperParameterExperimentData[["Size"]],levels=c("5","15","25"),ordered=T)
HyperParameterExperimentData["Batch_Time_Factor"]=factor(HyperParameterExperimentData[["Batch.Time"]],ordered=T)
HyperParameterExperimentData["Batch_Size_Factor"]=factor(HyperParameterExperimentData[["Batch.Size"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Step_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate.Step"]],ordered=T)
HyperParameterExperimentData["Iterations_Factor"]=factor(HyperParameterExperimentData[["Iterations"]],ordered=T)
HyperParameterExperimentData["Experiment_Factor"]=factor(HyperParameterExperimentData[["Experiment"]])
HyperParameterExperimentData["Structure_Factor"]=factor(HyperParameterExperimentData[["Structure"]])
# (Size_Factor,Batch_Time_Factor,Batch_Size_Factor,Learning_Rate_Factor,Learning_Rate_Step_Factor,Iterations_Factor,Experiment_Factor,Structure_Factor)
library(lme4)
library(lmerTest)
library(MuMIn)
simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor),
data = HyperParameterExperimentData,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(simple_model)
anova_result <- anova(simple_model, type = 3)
anova_result
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = HyperParameterExperimentData,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = HyperParameterExperimentData,
na.action = na.omit,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
clean_data <- na.omit(HyperParameterExperimentData)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
na.action = na.omit,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
clean_data <- na.omit(HyperParameterExperimentData)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model)
warnings()
library(parallel)
clust <- try(makeCluster(detectCores()-1))
clust <- try(makeCluster(detectCores()/2))
model_selection <- pdredge(less_simple_model,cluster=clust, trace=TRUE)
print(model_selection)
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
Glycolysis_known_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_KnownParamHybrid_Results.csv")
Glycolysis_unknown_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_UnknownParamHybrid_Results.csv")
Glycolysis_NODE_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_NODE_Results.csv")
LV_3Species_known_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
LV_3Species_unknown_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
LV_3Species_NODE_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### Process Data
# Add a column indicating which experiment, and add model structure identifier for each experiment
Glycolysis_known_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Experiment = rep("Glycolysis",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Experiment = rep("LV_3Species",nrow(LV_3Species_NODE_data))
Glycolysis_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Structure = rep("NODE",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Structure = rep("NODE",nrow(LV_3Species_NODE_data))
# Merge Data-sets
HyperParameterExperimentData = rbind(Glycolysis_known_param_hybrid_data,
Glycolysis_unknown_param_hybrid_data,
Glycolysis_NODE_data,
LV_3Species_known_param_hybrid_data,
LV_3Species_unknown_param_hybrid_data,
LV_3Species_NODE_data)
# Remove "inf" values (only removes 8 observations.)
HyperParameterExperimentData <- HyperParameterExperimentData[!is.infinite(HyperParameterExperimentData$Train.Loss),]
# Create factors of variables
HyperParameterExperimentData["Size_Factor"]=factor(HyperParameterExperimentData[["Size"]],levels=c("5","15","25"),ordered=T)
HyperParameterExperimentData["Batch_Time_Factor"]=factor(HyperParameterExperimentData[["Batch.Time"]],ordered=T)
HyperParameterExperimentData["Batch_Size_Factor"]=factor(HyperParameterExperimentData[["Batch.Size"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Step_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate.Step"]],ordered=T)
HyperParameterExperimentData["Iterations_Factor"]=factor(HyperParameterExperimentData[["Iterations"]],ordered=T)
HyperParameterExperimentData["Experiment_Factor"]=factor(HyperParameterExperimentData[["Experiment"]])
HyperParameterExperimentData["Structure_Factor"]=factor(HyperParameterExperimentData[["Structure"]])
# (Size_Factor,Batch_Time_Factor,Batch_Size_Factor,Learning_Rate_Factor,Learning_Rate_Step_Factor,Iterations_Factor,Experiment_Factor,Structure_Factor)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor),
data = HyperParameterExperimentData,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
# (Size_Factor,Batch_Time_Factor,Batch_Size_Factor,Learning_Rate_Factor,Learning_Rate_Step_Factor,Iterations_Factor,Experiment_Factor,Structure_Factor)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
less_simple_model <- lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model,cluster=clust, trace=TRUE)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model,cluster=clust, trace=TRUE)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model,cluster=clust, trace=TRUE)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
clusterExport(clust,"clean_data")
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(less_simple_model,cluster=clust, trace=TRUE)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
clusterExport(clust,"clean_data")
simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor),
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(simple_model,cluster=clust, trace=TRUE)
print(model_selection)
model_selection2 <- dredge(less_simple_model,cluster=clust, trace=TRUE)
model_selection <- dredge(simple_model,cluster=clust, trace=TRUE)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
clusterExport(clust,"clean_data")
simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor),
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
model_selection <- dredge(simple_model,cluster=clust, trace=TRUE)
print(model_selection)
gc()
gc()
model_average <- model.avg(model_selection)
model_average <- model.avg(model_selection)
print(model_average)
print(sw(model_selection))
print(importance(model_selection))
print(sw(model_selection))
test <- dredge(simple_model,cluster=clust, trace=TRUE, evaluate=FALSE)
print(test)
print(length(test))
setwd("~/Development/Scientific/Hybrid-NODEs-Biology/Hyperparameter_Experiments")
write.csv(HyperParameterExperimentData,"HyperparameterExperimentsData.csv")
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
Glycolysis_known_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_KnownParamHybrid_Results.csv")
Glycolysis_unknown_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_UnknownParamHybrid_Results.csv")
Glycolysis_NODE_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_NODE_Results.csv")
LV_3Species_known_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
LV_3Species_unknown_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
LV_3Species_NODE_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### Process Data
# Add a column indicating which experiment, and add model structure identifier for each experiment
Glycolysis_known_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Experiment = rep("Glycolysis",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Experiment = rep("LV_3Species",nrow(LV_3Species_NODE_data))
Glycolysis_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Structure = rep("NODE",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Structure = rep("NODE",nrow(LV_3Species_NODE_data))
# Merge Data-sets
HyperParameterExperimentData = rbind(Glycolysis_known_param_hybrid_data,
Glycolysis_unknown_param_hybrid_data,
Glycolysis_NODE_data,
LV_3Species_known_param_hybrid_data,
LV_3Species_unknown_param_hybrid_data,
LV_3Species_NODE_data)
# Remove "inf" values (only removes 8 observations.)
HyperParameterExperimentData <- HyperParameterExperimentData[!is.infinite(HyperParameterExperimentData$Train.Loss),]
write.csv(HyperParameterExperimentData,"HyperparameterExperimentsData.csv")
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
Glycolysis_known_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_KnownParamHybrid_Results.csv")
Glycolysis_unknown_param_hybrid_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_UnknownParamHybrid_Results.csv")
Glycolysis_NODE_data = read.csv("../Mechanism_Uncertainty/Glycolysis_Analysis/HyperparameterExperiments/Glycolysis_NODE_Results.csv")
LV_3Species_known_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
LV_3Species_unknown_param_hybrid_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
LV_3Species_NODE_data = read.csv("../State_Uncertainty/3_Species_LV/HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### Process Data
# Add a column indicating which experiment, and add model structure identifier for each experiment
Glycolysis_known_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Experiment = rep("Glycolysis",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Experiment = rep("Glycolysis",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Experiment = rep("LV_3Species",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Experiment = rep("LV_3Species",nrow(LV_3Species_NODE_data))
Glycolysis_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(Glycolysis_known_param_hybrid_data))
Glycolysis_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(Glycolysis_unknown_param_hybrid_data))
Glycolysis_NODE_data$Structure = rep("NODE",nrow(Glycolysis_NODE_data))
LV_3Species_known_param_hybrid_data$Structure = rep("KnownHybrid",nrow(LV_3Species_known_param_hybrid_data))
LV_3Species_unknown_param_hybrid_data$Structure = rep("UnknownHybrid",nrow(LV_3Species_unknown_param_hybrid_data))
LV_3Species_NODE_data$Structure = rep("NODE",nrow(LV_3Species_NODE_data))
# Merge Data-sets
HyperParameterExperimentData = rbind(Glycolysis_known_param_hybrid_data,
Glycolysis_unknown_param_hybrid_data,
Glycolysis_NODE_data,
LV_3Species_known_param_hybrid_data,
LV_3Species_unknown_param_hybrid_data,
LV_3Species_NODE_data)
# Remove "inf" values (only removes 8 observations.)
HyperParameterExperimentData <- HyperParameterExperimentData[!is.infinite(HyperParameterExperimentData$Train.Loss),]
write.csv(HyperParameterExperimentData,"HyperparameterExperimentsData.csv")
# Create factors of variables
HyperParameterExperimentData["Size_Factor"]=factor(HyperParameterExperimentData[["Size"]],levels=c("5","15","25"),ordered=T)
HyperParameterExperimentData["Batch_Time_Factor"]=factor(HyperParameterExperimentData[["Batch.Time"]],ordered=T)
HyperParameterExperimentData["Batch_Size_Factor"]=factor(HyperParameterExperimentData[["Batch.Size"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate"]],ordered=T)
HyperParameterExperimentData["Learning_Rate_Step_Factor"]=factor(HyperParameterExperimentData[["Learning.Rate.Step"]],ordered=T)
HyperParameterExperimentData["Iterations_Factor"]=factor(HyperParameterExperimentData[["Iterations"]],ordered=T)
HyperParameterExperimentData["Experiment_Factor"]=factor(HyperParameterExperimentData[["Experiment"]])
HyperParameterExperimentData["Structure_Factor"]=factor(HyperParameterExperimentData[["Structure"]])
# (Size_Factor,Batch_Time_Factor,Batch_Size_Factor,Learning_Rate_Factor,Learning_Rate_Step_Factor,Iterations_Factor,Experiment_Factor,Structure_Factor)
library(lme4)
library(lmerTest)
library(MuMIn)
library(parallel)
clust <- try(makeCluster(detectCores()/2))
clean_data <- na.omit(HyperParameterExperimentData)
options(na.action = na.fail)
clusterExport(clust,"clean_data")
simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor),
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
model_selection <- dredge(simple_model,cluster=clust, trace=TRUE)
print(model_selection)
print(sw(model_selection))
summary(simple_model)
anova_result <- anova(simple_model, type = 3)
anova_result
less_simple_model <- lme4::lmer(log10(Train.Loss) ~
(1 | Experiment) +
(1 | Structure) +
(Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,
data = clean_data,
control = lme4::lmerControl(optimizer="bobyqa",optCtrl = list(verbose = 1)))
summary(less_simple_model)
anova_result <- anova(less_simple_model, type = 3)
anova_result
install.packages("effectsize")
library(effectsize)
# Calculate effect size for the model
eta_squared(less_simple_model)
