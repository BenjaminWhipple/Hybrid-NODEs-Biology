setwd("~/Development/Scientific/Hybrid-NODEs-Biology/State_Uncertainty/3_Species_LV")
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
known_param_hybrid_data = read.csv("HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
unknown_param_hybrid_data = read.csv("HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
NODE_data = read.csv("HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### COUNT MISSING
print(sum(is.na(known_param_hybrid_data["Train.Loss"])))
print(sum(is.na(unknown_param_hybrid_data["Train.Loss"])))
print(sum(is.na(NODE_data["Train.Loss"])))
### COUNT FULLY MISSING STRATUM
known_param_res <- known_param_hybrid_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
unknown_param_res <- unknown_param_hybrid_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
NODE_param_res <- NODE_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
known_param_res
unknown_param_res
NODE_param_res
# So, we can see that there is no compartment that is fully missing entries.
### CREATE MODEL OF PARAMETER INFLUENCE ON FIT OUTCOME (TRAINING LOSS)
# Create missing values columns
unknown_param_hybrid_data["Missing"] = ifelse(is.na(unknown_param_hybrid_data["Train.Loss"]),1,0)
known_param_hybrid_data["Missing"] = ifelse(is.na(known_param_hybrid_data["Train.Loss"]),1,0)
NODE_data["Missing"] = ifelse(is.na(NODE_data["Train.Loss"]),1,0)
# Imputed values column
# Encode factor levels
cols = c("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations")
factor_cols = c("Size_Factor","Batch_Time_Factor","Batch_Size_Factor","Learning_Rate_Factor","Learning_Rate_Step_Factor","Iterations_Factor")
print(cols)
unknown_param_hybrid_data["Size_Factor"]=factor(unknown_param_hybrid_data[["Size"]],levels=c("5","15","25"),ordered=T)
unknown_param_hybrid_data["Batch_Time_Factor"]=factor(unknown_param_hybrid_data[["Batch.Time"]],ordered=T)
unknown_param_hybrid_data["Batch_Size_Factor"]=factor(unknown_param_hybrid_data[["Batch.Size"]],ordered=T)
unknown_param_hybrid_data["Learning_Rate_Factor"]=factor(unknown_param_hybrid_data[["Learning.Rate"]],ordered=T)
unknown_param_hybrid_data["Learning_Rate_Step_Factor"]=factor(unknown_param_hybrid_data[["Learning.Rate.Step"]],ordered=T)
unknown_param_hybrid_data["Iterations_Factor"]=factor(unknown_param_hybrid_data[["Iterations"]],ordered=T)
known_param_hybrid_data["Size_Factor"]=factor(known_param_hybrid_data[["Size"]],levels=c("5","15","25"),ordered=T)
known_param_hybrid_data["Batch_Time_Factor"]=factor(known_param_hybrid_data[["Batch.Time"]],ordered=T)
known_param_hybrid_data["Batch_Size_Factor"]=factor(known_param_hybrid_data[["Batch.Size"]],ordered=T)
known_param_hybrid_data["Learning_Rate_Factor"]=factor(known_param_hybrid_data[["Learning.Rate"]],ordered=T)
known_param_hybrid_data["Learning_Rate_Step_Factor"]=factor(known_param_hybrid_data[["Learning.Rate.Step"]],ordered=T)
known_param_hybrid_data["Iterations_Factor"]=factor(known_param_hybrid_data[["Iterations"]],ordered=T)
NODE_data["Size_Factor"]=factor(NODE_data[["Size"]],levels=c("5","15","25"),ordered=T)
NODE_data["Batch_Time_Factor"]=factor(NODE_data[["Batch.Time"]],ordered=T)
NODE_data["Batch_Size_Factor"]=factor(NODE_data[["Batch.Size"]],ordered=T)
NODE_data["Learning_Rate_Factor"]=factor(NODE_data[["Learning.Rate"]],ordered=T)
NODE_data["Learning_Rate_Step_Factor"]=factor(NODE_data[["Learning.Rate.Step"]],ordered=T)
NODE_data["Iterations_Factor"]=factor(NODE_data[["Iterations"]],ordered=T)
# Run ANOVA
unknown_param_hybrid_data["Train.Loss"]
log10(unknown_param_hybrid_data["Train.Loss"])
UnknownParam_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = unknown_param_hybrid_data)
is.nan(unknown_param_hybrid_data)
unknown_param_hybrid_data
is.nan(unknown_param_hybrid_data)
is.nan(unknown_param_hybrid_data["Train.Loss"])
unknown_param_hybrid_data[unknown_param_hybrid_data["Train.Loss"]==0]
sum(unknown_param_hybrid_data[unknown_param_hybrid_data["Train.Loss"]==0])
summary(unknown_param_hybrid_data)
unknown_param_hybrid_data["Train.Loss"]
max(unknown_param_hybrid_data["Train.Loss"])
unknown_param_hybrid_data["Train.Loss"]
summary(unknown_param_hybrid_data)
unknown_param_hybrid_data[is.infinite(unknown_param_hybrid_data["Train.Loss"])]
unknown_param_hybrid_data[is.infinite(unknown_param_hybrid_data["Train.Loss"]),]
test <- unknown_param_hybrid_data[!is.infinite(df$Train.Loss),]
is.infinite(df$Train.Loss)
is.infinite(unknown_param_hybrid_data$Train.Loss)
sum(is.infinite(unknown_param_hybrid_data$Train.Loss))
test <- unknown_param_hybrid_data[!is.infinite(unknown_param_hybrid_data$Train.Loss),]
test
library(dplyr)
library(broom)
library(xtable)
### LOAD DATA
known_param_hybrid_data = read.csv("HyperparameterExperiments/3Species_LV_KnownParamHybrid_Results.csv")
unknown_param_hybrid_data = read.csv("HyperparameterExperiments/3Species_LV_UnknownParamHybrid_Results.csv")
NODE_data = read.csv("HyperparameterExperiments/3Species_LV_NODE_Results.csv")
### COUNT MISSING
print(sum(is.na(known_param_hybrid_data["Train.Loss"])))
print(sum(is.na(unknown_param_hybrid_data["Train.Loss"])))
print(sum(is.na(NODE_data["Train.Loss"])))
### COUNT FULLY MISSING STRATUM
known_param_res <- known_param_hybrid_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
unknown_param_res <- unknown_param_hybrid_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
NODE_param_res <- NODE_data %>%
group_by("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations") %>%
summarize(all_missing=all(is.na("Train.Loss"))) %>%
filter(all_missing)
known_param_res
unknown_param_res
NODE_param_res
# So, we can see that there is no compartment that is fully missing entries.
### CREATE MODEL OF PARAMETER INFLUENCE ON FIT OUTCOME (TRAINING LOSS)
# Create missing values columns
unknown_param_hybrid_data["Missing"] = ifelse(is.na(unknown_param_hybrid_data["Train.Loss"]),1,0)
known_param_hybrid_data["Missing"] = ifelse(is.na(known_param_hybrid_data["Train.Loss"]),1,0)
NODE_data["Missing"] = ifelse(is.na(NODE_data["Train.Loss"]),1,0)
# Remove "inf" values
unknown_param_hybrid_data <- unknown_param_hybrid_data[is.infinite(unknown_param_hybrid_data["Train.Loss"]),]
unknown_param_hybrid_data <- unknown_param_hybrid_data[!is.infinite(unknown_param_hybrid_data["Train.Loss"]),]
UnknownParam_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = unknown_param_hybrid_data)
cols = c("Size","Batch.Time","Batch.Size","Learning.Rate","Learning.Rate.Step","Iterations")
factor_cols = c("Size_Factor","Batch_Time_Factor","Batch_Size_Factor","Learning_Rate_Factor","Learning_Rate_Step_Factor","Iterations_Factor")
print(cols)
unknown_param_hybrid_data["Size_Factor"]=factor(unknown_param_hybrid_data[["Size"]],levels=c("5","15","25"),ordered=T)
unknown_param_hybrid_data["Batch_Time_Factor"]=factor(unknown_param_hybrid_data[["Batch.Time"]],ordered=T)
unknown_param_hybrid_data["Batch_Size_Factor"]=factor(unknown_param_hybrid_data[["Batch.Size"]],ordered=T)
unknown_param_hybrid_data["Learning_Rate_Factor"]=factor(unknown_param_hybrid_data[["Learning.Rate"]],ordered=T)
unknown_param_hybrid_data["Learning_Rate_Step_Factor"]=factor(unknown_param_hybrid_data[["Learning.Rate.Step"]],ordered=T)
unknown_param_hybrid_data["Iterations_Factor"]=factor(unknown_param_hybrid_data[["Iterations"]],ordered=T)
known_param_hybrid_data["Size_Factor"]=factor(known_param_hybrid_data[["Size"]],levels=c("5","15","25"),ordered=T)
known_param_hybrid_data["Batch_Time_Factor"]=factor(known_param_hybrid_data[["Batch.Time"]],ordered=T)
known_param_hybrid_data["Batch_Size_Factor"]=factor(known_param_hybrid_data[["Batch.Size"]],ordered=T)
known_param_hybrid_data["Learning_Rate_Factor"]=factor(known_param_hybrid_data[["Learning.Rate"]],ordered=T)
known_param_hybrid_data["Learning_Rate_Step_Factor"]=factor(known_param_hybrid_data[["Learning.Rate.Step"]],ordered=T)
known_param_hybrid_data["Iterations_Factor"]=factor(known_param_hybrid_data[["Iterations"]],ordered=T)
NODE_data["Size_Factor"]=factor(NODE_data[["Size"]],levels=c("5","15","25"),ordered=T)
NODE_data["Batch_Time_Factor"]=factor(NODE_data[["Batch.Time"]],ordered=T)
NODE_data["Batch_Size_Factor"]=factor(NODE_data[["Batch.Size"]],ordered=T)
NODE_data["Learning_Rate_Factor"]=factor(NODE_data[["Learning.Rate"]],ordered=T)
NODE_data["Learning_Rate_Step_Factor"]=factor(NODE_data[["Learning.Rate.Step"]],ordered=T)
NODE_data["Iterations_Factor"]=factor(NODE_data[["Iterations"]],ordered=T)
# Run ANOVA
unknown_param_hybrid_data["Train.Loss"]
log10(unknown_param_hybrid_data["Train.Loss"])
UnknownParam_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = unknown_param_hybrid_data)
unknown_param_hybrid_data <- unknown_param_hybrid_data[!is.infinite(unknown_param_hybrid_data["Train.Loss"]),]
unknown_param_hybrid_data <- unknown_param_hybrid_data[!is.infinite(unknown_param_hybrid_data$Train.Loss),]
known_param_hybrid_data <- known_param_hybrid_data[!is.infinite(known_param_hybrid_data$Train.Loss),]
NODE_data <- NODE_data[!is.infinite(NODE_data$Train.Loss),]
unknown_param_hybrid_data["Train.Loss"]
log10(unknown_param_hybrid_data["Train.Loss"])
UnknownParam_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = unknown_param_hybrid_data)
KnownParam_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = known_param_hybrid_data)
NDE_anova <- aov(log10(Train.Loss) ~ (Size_Factor + Batch_Time_Factor + Batch_Size_Factor + Learning_Rate_Factor + Learning_Rate_Step_Factor + Iterations_Factor)^2,data = NODE_data)
summary(UnknownParam_anova)
summary(KnownParam_anova)
summary(NDE_anova)
xtable(UnknownParam_anova)
xtable(KnownParam_anova)
xtable(NDE_anova)
xtable(UnknownParam_anova)
xtable(KnownParam_anova)
xtable(NDE_anova)
